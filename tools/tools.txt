plateau: 7 colonnes et 6 lignes
nombre de trous par ligne: 7    ;   par colonnes: 6
font ASCII-ART: Big Money-sw

Meilleur coup:

int meilleurCoup(Pion plateau[N][M], int joueur) {
    int colonne, score, meilleurScore = -1000, meilleurCoup = -1;
    for (colonne = 0; colonne < M; colonne++) {
        if (plateau[N-1][colonne].character == ' ') {
            jouerCoup(plateau, joueur, colonne);
            score = evaluerPlateau(plateau);
            retirerPion(plateau, colonne);
            if (score > meilleurScore) {
                meilleurScore = score;
                meilleurCoup = colonne;
            }
        }
    }
    return meilleurCoup;
}


Jouer coup:

void jouerCoup(Pion plateau[N][M], int joueur, int colonne) {
    int ligne = 0;
    while (ligne < N && plateau[ligne][colonne].character != ' ') {
        ligne++;
    }
    if (ligne < N) {
        if (joueur == 1) {
            plateau[ligne][colonne].character = 'X';
            plateau[ligne][colonne].color = joueur;
        } else {
            plateau[ligne][colonne].character = 'O';
            plateau[ligne][colonne].color = joueur;
        }
    }
}


Retirer pion

void retirerPion(Pion plateau[N][M], int colonne) {
    int ligne = N - 1;
    while (ligne >= 0 && plateau[ligne][colonne].character == ' ') {
        ligne--;
    }
    if (ligne >= 0) {
        plateau[ligne][colonne].character = ' ';
        plateau[ligne][colonne].color = 0;
    }
}



int evaluerPlateau(Pion plateau[N][M]) {
    int score = 0;
    int ligne, colonne;
    for (ligne = 0; ligne < N; ligne++) {
        for (colonne = 0; colonne < M; colonne++) {
            if (plateau[ligne][colonne].character == 'X') {
                score += evaluerScore(plateau, ligne, colonne, 1);
            } else if (plateau[ligne][colonne].character == 'O') {
                score -= evaluerScore(plateau, ligne, colonne, -1);
            }
        }
    }
    return score;
}


Evaluer score:

int evaluerScore(Pion plateau[N][M], int ligne, int colonne, int joueur) {
    int score = 0;
    int i;
    int streak;
    // On vérifie horizontalement
    streak = 1;
    for (i = 1; i < 4; i++) {
        if (colonne + i > M - 1) break;
        if (plateau[ligne][colonne + i].color == joueur) {
            streak++;
            if (streak == 4) {
                score += 1;
                break;
            }
        } else {
            break;
        }
    }

    // On vérifie verticalement
    streak = 1;
    for (i = 1; i < 4; i++) {
        if (ligne + i > N - 1) break;
        if (plateau[ligne + i][colonne].color == joueur) {
            streak++;
            if (streak == 4) {
                score += 1;
                break;
            }
        } else {
            break;
        }
    }

    // On vérifie en diagonale montante
    streak = 1;
    for (i = 1; i < 4; i++) {
        if (ligne - i < 0 || colonne + i > M - 1) break;
        if (plateau[ligne - i][colonne + i].color == joueur) {
            streak++;
            if (streak == 4) {
                score += 1;
                break;
            }
        } else {
            break;
        }
    }

    // On vérifie en diagonale descendante
    streak = 1;
    for (i = 1; i < 4; i++) {
        if (ligne + i > N - 1 || colonne + i > M - 1) break;
        if (plateau[ligne + i][colonne + i].color == joueur) {
            streak++;
            if (streak == 4) {
                score += 1;
                break;
            }
        } else {
            break;
        }
    }
    return score;
}